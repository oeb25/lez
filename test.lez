uniforms {
	tex: sampler2D,
    scale: float,
}

fun sampleTex(coords: vec2): vec3 {
    let color = vec3(texture(tex, coords));
    if scale != 2.0 {
        color
    } else {
        let brightness = dot(color, vec3(0.2126, 0.7152, 0.0722));
        if brightness > 0.04 {
            color
        } else {
            vec3(0)
        }
    }
}

struct VSOut {
    tex_coords: vec2,
}

fun vert(): VSOut {
    let result: VSOut;

    result.tex_coords = vec2(1.0, 0.0);

    result
}

fun frag(vs: VSOut): vec3 {
    let tex_offset = 1.0 / textureSize(tex, 0);

    let meh = 5 + 10 * 2 + 13;
    
    let c = sampleTex(vs.tex_coords);
    
    let horizontal = mod(scale, 2) == 0;
    
    for i in 0..5 {
        let move_by = if horizontal {
            vec2(tex_offset.x * i, 0)
        } else {
            vec2(0, tex_offset.y * i)
        };
        c += sampleTex(vs.tex_coords + move_by);
        c += sampleTex(vs.tex_coords - move_by);
    };

    c
}

fun factorial(x: int): int {
    if x > 1 {
        x * factorial(x - 1)
    } else {
        x
    }
}

fun main(): int {
    let x = {
        let y = 4;
        1 + 2 - (3 - y)
    };

    let z = factorial(if x > 2 { x } else { 15 });

    let a = if 1 > {1 + 2} {
        12
    } else {
        factorial(10)
    };

    if a > 12 {
        0
    } else {
        a
    }
}

fun factorial(x: int): int {
    if x > 1 {
        x * factorial(x - 1)
    } else {
        x
    }
}

fun main(): int {
    12
}
